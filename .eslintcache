[{"/Users/Mile/job-challenges/jobsity-challenge/src/app/calendar/index.tsx":"1","/Users/Mile/job-challenges/jobsity-challenge/src/App.tsx":"2","/Users/Mile/job-challenges/jobsity-challenge/src/index.tsx":"3","/Users/Mile/job-challenges/jobsity-challenge/src/app/calendar/ReminderModal.tsx":"4","/Users/Mile/job-challenges/jobsity-challenge/src/app/calendar/HeaderWeek.tsx":"5","/Users/Mile/job-challenges/jobsity-challenge/src/app/calendar/LocationInput.tsx":"6"},{"size":9946,"mtime":1611616898000,"results":"7","hashOfConfig":"8"},{"size":162,"mtime":1610288895000,"results":"9","hashOfConfig":"8"},{"size":353,"mtime":1610289118000,"results":"10","hashOfConfig":"8"},{"size":5009,"mtime":1611617032000,"results":"11","hashOfConfig":"8"},{"size":566,"mtime":1610589625000,"results":"12","hashOfConfig":"8"},{"size":2616,"mtime":1611582646000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"ejgxfe",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Mile/job-challenges/jobsity-challenge/src/app/calendar/index.tsx",["27"],"import React, { useEffect, useState } from 'react';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { v4 as uuidV4 } from 'uuid';\n\nimport { Box, Button, Flex, Grid, useDisclosure } from '@chakra-ui/react';\nimport { IoTrashOutline } from 'react-icons/io5';\n\nimport ReminderModal, { Reminder } from './ReminderModal';\nimport HeaderWeek from './HeaderWeek';\n\ntype Day = null | { dayNum: number; reminders: Reminder[] };\ntype Calendar = Day[][];\n\nconst currentDate = new Date().getDate();\nconst currentMonth = new Date().getMonth();\nconst currentYear = new Date().getFullYear();\n\nexport default function CalendarRendering() {\n  const [gridCalendar, setGridCalendar] = useState<Calendar | null>();\n  const [currentReminder, setCurrentReminder] = useState<Reminder>();\n  const [currentDayNum, setCurrentDayNum] = useState<number>();\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    const now = new Date();\n    // Get initial day of month\n    const startWeekDay = new Date(\n      now.getFullYear(),\n      now.getMonth(),\n      1\n    ).getDay();\n\n    // Get the number of days\n    const numDays = new Date(\n      now.getFullYear(),\n      now.getMonth() + 1,\n      0\n    ).getDate();\n\n    const generatedCalendar = generateCalendar(startWeekDay, numDays); // Get generated calendar\n    setGridCalendar(generatedCalendar); // Set calendar on state\n  }, []);\n\n  const handleDayClick = (dayNum?: number) => {\n    setCurrentDayNum(dayNum);\n    onOpen();\n  };\n\n  const onSubmit = (reminder: Reminder) => {\n    return new Promise<void>((resolve, reject) => {\n      setTimeout(() => {\n        if (\n          reminder.date.getFullYear() !== currentYear ||\n          reminder.date.getMonth() !== currentMonth\n        ) {\n          alert('This calendar is for the current month only');\n          onClose();\n          reject();\n        }\n\n        if (gridCalendar) {\n          if (currentReminder) {\n            for (\n              let weekIndex = 0;\n              weekIndex < gridCalendar?.length;\n              weekIndex++\n            ) {\n              for (let dayIndex = 0; dayIndex < 7; dayIndex++) {\n                const remindersList =\n                  gridCalendar[weekIndex][dayIndex]?.reminders;\n                if (remindersList) {\n                  for (\n                    let reminderIndex = 0;\n                    reminderIndex < remindersList.length;\n                    reminderIndex++\n                  ) {\n                    // Allow edit and save reminder object\n\n                    if (\n                      remindersList[reminderIndex].id === currentReminder.id\n                    ) {\n                      remindersList[reminderIndex] = {\n                        ...reminder,\n                        id: currentReminder.id, //Conserve the id in the edited reminder\n                      };\n                      // Sort new reminders\n                      const dayObj = gridCalendar[weekIndex][dayIndex];\n                      if (dayObj) {\n                        dayObj.reminders = sortReminders(remindersList);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            // Save new reminder\n\n            const id = uuidV4(); // Assign new id with uuidV4 library\n            const date = reminder.date.getDate();\n\n            // Goes through every week of the month\n            for (\n              let weekIndex = 0;\n              weekIndex < gridCalendar.length;\n              weekIndex++\n            ) {\n              // goes through every day of the week\n              for (let dayIndex = 0; dayIndex < 7; dayIndex++) {\n                const day = gridCalendar[weekIndex][dayIndex];\n                // Validate day existency and the dates match\n                if (day && day.dayNum === date) {\n                  day.reminders.push({ id, ...reminder }); // Push the new reminder\n                  //Sort reminders saved\n                  const dayObj = gridCalendar[weekIndex][dayIndex];\n                  if (dayObj) {\n                    dayObj.reminders = sortReminders(day.reminders);\n                  }\n                }\n              }\n            }\n          }\n          //Display reminders on the calendar view in the correct time order.\n          setGridCalendar(gridCalendar);\n        }\n\n        onClose();\n        resolve();\n      }, 600); // This simulates a server request\n    });\n  };\n\n  return (\n    <Box p=\"10px\">\n      <HeaderWeek />\n      {gridCalendar &&\n        gridCalendar.map((week, i) => (\n          <Grid templateColumns=\"repeat(7, 1fr)\" key={i}>\n            {week.map((day, j) => (\n              <Box\n                key={j}\n                height=\"200px\"\n                w=\"100%\"\n                p=\"30px 0px 0px 0px\"\n                position=\"relative\"\n                border={'1px solid rgb(226, 232, 240)'}\n                fontSize=\"14px\"\n                fontWeight=\"600\"\n                color=\"#70757a\"\n                overflow=\"auto\"\n                onClick={() => handleDayClick(day?.dayNum)}\n              >\n                <Flex\n                  justify=\"center\"\n                  align=\"center\"\n                  position=\"absolute\"\n                  top=\"5px\"\n                  left=\"5px\"\n                  w=\"27px\"\n                  h=\"27px\"\n                  fontWeight=\"600\"\n                  {...(currentDate === day?.dayNum\n                    ? {\n                        color: '#fff',\n                        borderRadius: '50%',\n                        backgroundColor: '#3182ce',\n                      }\n                    : {})}\n                >\n                  {day && day.dayNum}\n                </Flex>\n                {day?.reminders.length !== 0 && day !== null && (\n                  <Box\n                    position=\"absolute\"\n                    top=\"12px\"\n                    right=\"5px\"\n                    cursor=\"pointer\"\n                    padding=\"3px\"\n                    _hover={{\n                      backgroundColor: '#dadce0',\n                      borderRadius: '50%',\n                    }}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      day.reminders = [];\n                      setGridCalendar([...gridCalendar]);\n                    }}\n                  >\n                    <IoTrashOutline />\n                  </Box>\n                )}\n\n                {day?.reminders.map((reminder, idx) => (\n                  <Flex\n                    align=\"center\"\n                    key={idx}\n                    m=\"5px\"\n                    p=\"2px 5px\"\n                    cursor=\"pointer\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setCurrentReminder(reminder);\n                      onOpen();\n                    }}\n                    _hover={{\n                      backgroundColor: '#dadce0',\n                      borderRadius: '10px',\n                    }}\n                  >\n                    <Box\n                      w=\"10px\"\n                      h=\"10px\"\n                      marginRight=\"5px\"\n                      borderRadius=\"50%\"\n                      backgroundColor={reminder.color}\n                      flexShrink={0}\n                    />\n                    <Box\n                      fontWeight=\"500\"\n                      whiteSpace=\"nowrap\"\n                      overflow=\"hidden\"\n                      textOverflow=\"ellipsis\"\n                    >\n                      {reminder.title}\n                    </Box>\n                    <Box\n                      cursor=\"pointer\"\n                      padding=\"3px\"\n                      marginLeft=\"auto\"\n                      _hover={{\n                        backgroundColor: '#dadce0',\n                        borderRadius: '50%',\n                      }}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        day.reminders = day.reminders.filter(\n                          (r) => r.id !== reminder.id\n                        );\n                        setGridCalendar([...gridCalendar]);\n                      }}\n                    >\n                      <IoTrashOutline />\n                    </Box>\n                  </Flex>\n                ))}\n              </Box>\n            ))}\n          </Grid>\n        ))}\n\n      <ReminderModal\n        isOpen={isOpen}\n        onClose={() => {\n          onClose();\n          setCurrentReminder(undefined);\n        }}\n        onSubmit={onSubmit}\n        currentReminder={currentReminder}\n        currentDayNum={currentDayNum}\n      />\n    </Box>\n  );\n}\n\nfunction generateCalendar(startWeekDay: number, numDays: number) {\n  const calendar: Array<any> = [[]];\n  let colIndex = 0;\n\n  // Starting month with null\n  for (colIndex = 0; colIndex < startWeekDay; colIndex++) {\n    calendar[0].push(null); // [[null,null,...]], and colIndex incremented\n  }\n\n  // Fill the calendar with the day numbers and their respective remainders\n  let week = 0; // [0,1,2,3,4...]\n  for (let dayNum = 1; dayNum <= numDays; dayNum++) {\n    const dayObj = {\n      dayNum,\n      reminders: [],\n    }; // Object with dayNum and list of reminders for each day\n    calendar[week][colIndex] = dayObj; // Assign dayObject to each column\n\n    // Condition for changing week\n    if (colIndex === 6 && dayNum !== numDays) {\n      calendar.push([]); // Insert another array wich is the first week of this month\n      week++; // Move a week forward\n      colIndex = 0; // Re-start the column\n    } else {\n      colIndex++;\n    }\n  }\n\n  // Fill end month with null\n  for (; colIndex <= 6; colIndex++) {\n    calendar[week][colIndex] = null;\n  }\n\n  return calendar;\n}\nconst sortReminders = (reminderList: Reminder[]) => {\n  return reminderList.sort(\n    (reminderA: Reminder, reminderB: Reminder) =>\n      reminderA.date.getTime() - reminderB.date.getTime()\n  );\n};\n","/Users/Mile/job-challenges/jobsity-challenge/src/App.tsx",[],"/Users/Mile/job-challenges/jobsity-challenge/src/index.tsx",[],"/Users/Mile/job-challenges/jobsity-challenge/src/app/calendar/ReminderModal.tsx",[],"/Users/Mile/job-challenges/jobsity-challenge/src/app/calendar/HeaderWeek.tsx",[],"/Users/Mile/job-challenges/jobsity-challenge/src/app/calendar/LocationInput.tsx",[],{"ruleId":"28","severity":1,"message":"29","line":5,"column":15,"nodeType":"30","messageId":"31","endLine":5,"endColumn":21},"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar"]